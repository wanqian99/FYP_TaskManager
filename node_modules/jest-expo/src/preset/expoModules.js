module.exports = {
  AIRGoogleMapCalloutManager: {},
  AIRGoogleMapCalloutSubviewManager: {},
  AIRGoogleMapCircleManager: {},
  AIRGoogleMapHeatmapManager: {},
  AIRGoogleMapManager: {
    animateCamera: { type: 'function', functionType: 'async' },
    animateToRegion: { type: 'function', functionType: 'async' },
    coordinateForPoint: { type: 'function', functionType: 'promise' },
    fitToCoordinates: { type: 'function', functionType: 'async' },
    fitToElements: { type: 'function', functionType: 'async' },
    fitToSuppliedMarkers: { type: 'function', functionType: 'async' },
    getCamera: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getMapBoundaries: { type: 'function', functionType: 'promise' },
    getMarkersFrames: { type: 'function', functionType: 'promise' },
    legalNotice: { type: 'string' },
    pointForCoordinate: { type: 'function', functionType: 'promise' },
    setCamera: { type: 'function', functionType: 'async' },
    setIndoorActiveLevelIndex: { type: 'function', functionType: 'async' },
    setMapBoundaries: { type: 'function', functionType: 'async' },
    takeSnapshot: { type: 'function', functionType: 'async' },
  },
  AIRGoogleMapMarkerManager: {
    getConstants: { type: 'function' },
    hideCallout: { type: 'function', functionType: 'async' },
    redraw: { type: 'function', functionType: 'async' },
    redrawCallout: { type: 'function', functionType: 'async' },
    showCallout: { type: 'function', functionType: 'async' },
  },
  AIRGoogleMapOverlayManager: {},
  AIRGoogleMapPolygonManager: {},
  AIRGoogleMapPolylineManager: {},
  AIRGoogleMapUrlTileManager: {},
  AIRGoogleMapWMSTileManager: {},
  AIRMapCalloutManager: {},
  AIRMapCalloutSubviewManager: {},
  AIRMapCircleManager: {},
  AIRMapLocalTileManager: {},
  AIRMapManager: {
    animateCamera: { type: 'function', functionType: 'async' },
    animateToRegion: { type: 'function', functionType: 'async' },
    coordinateForPoint: { type: 'function', functionType: 'promise' },
    fitToCoordinates: { type: 'function', functionType: 'async' },
    fitToElements: { type: 'function', functionType: 'async' },
    fitToSuppliedMarkers: { type: 'function', functionType: 'async' },
    getAddressFromCoordinates: { type: 'function', functionType: 'promise' },
    getCamera: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getMapBoundaries: { type: 'function', functionType: 'promise' },
    getMarkersFrames: { type: 'function', functionType: 'promise' },
    pointForCoordinate: { type: 'function', functionType: 'promise' },
    setCamera: { type: 'function', functionType: 'async' },
    takeSnapshot: { type: 'function', functionType: 'async' },
  },
  AIRMapMarkerManager: {
    getConstants: { type: 'function' },
    hideCallout: { type: 'function', functionType: 'async' },
    redrawCallout: { type: 'function', functionType: 'async' },
    showCallout: { type: 'function', functionType: 'async' },
  },
  AIRMapOverlayManager: {},
  AIRMapPolygonManager: {},
  AIRMapPolylineManager: {},
  AIRMapUrlTileManager: {},
  AIRMapWMSTileManager: {},
  ExpoBridgeModule: {},
  'ExpoModulesCore.ViewModuleWrapper': {},
  ExpoNativeModuleIntrospection: {
    getConstants: { type: 'function' },
    getNativeModuleNamesAsync: { type: 'function', functionType: 'promise' },
    introspectNativeModuleAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentNotifications: {
    cancelAllScheduledNotificationsAsync: { type: 'function', functionType: 'promise' },
    cancelScheduledNotificationAsync: { type: 'function', functionType: 'promise' },
    createCategoryAsync: { type: 'function', functionType: 'promise' },
    deleteCategoryAsync: { type: 'function', functionType: 'promise' },
    getBadgeNumberAsync: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getDevicePushTokenAsync: { type: 'function', functionType: 'promise' },
    getExponentPushTokenAsync: { type: 'function', functionType: 'promise' },
    legacyScheduleLocalRepeatingNotification: { type: 'function', functionType: 'promise' },
    presentLocalNotification: { type: 'function', functionType: 'promise' },
    scheduleLocalNotification: { type: 'function', functionType: 'promise' },
    scheduleNotificationWithCalendar: { type: 'function', functionType: 'promise' },
    scheduleNotificationWithTimer: { type: 'function', functionType: 'promise' },
    setBadgeNumberAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentScopedModuleRegistry: {},
  ExponentTest: {
    action: { type: 'function', functionType: 'promise' },
    completed: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    isInCI: { type: 'number', mock: 0 },
    log: { type: 'function', functionType: 'async' },
    shouldSkipTestsRequiringPermissionsAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentUtil: {},
  LottieAnimationView: {
    VERSION: { type: 'number', mock: 1 },
    getConstants: { type: 'function' },
    pause: { type: 'function', functionType: 'async' },
    play: { type: 'function', functionType: 'async' },
    reset: { type: 'function', functionType: 'async' },
    resume: { type: 'function', functionType: 'async' },
  },
  NativeUnimoduleProxy: {
    callMethod: { type: 'function', functionType: 'promise' },
    exportedMethods: {
      type: 'object',
      mock: {
        '': [],
        EASClient: [],
        ExpoAppleAuthentication: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'requestAsync', argumentsCount: 1, key: 1 },
          { name: 'getCredentialStateAsync', argumentsCount: 1, key: 2 },
        ],
        ExpoAppleAuthenticationButtonContinueBlack: [],
        ExpoAppleAuthenticationButtonContinueWhite: [],
        ExpoAppleAuthenticationButtonContinueWhiteOutline: [],
        ExpoAppleAuthenticationButtonSignInBlack: [],
        ExpoAppleAuthenticationButtonSignInWhite: [],
        ExpoAppleAuthenticationButtonSignInWhiteOutline: [],
        ExpoAppleAuthenticationButtonSignUpBlack: [],
        ExpoAppleAuthenticationButtonSignUpWhite: [],
        ExpoAppleAuthenticationButtonSignUpWhiteOutline: [],
        ExpoApplication: [
          { name: 'getIosIdForVendorAsync', argumentsCount: 0, key: 0 },
          { name: 'getPushNotificationServiceEnvironmentAsync', argumentsCount: 0, key: 1 },
          { name: 'getApplicationReleaseTypeAsync', argumentsCount: 0, key: 2 },
          { name: 'getInstallationTimeAsync', argumentsCount: 0, key: 3 },
        ],
        ExpoBackgroundFetch: [
          { name: 'unregisterTaskAsync', argumentsCount: 1, key: 0 },
          { name: 'setMinimumIntervalAsync', argumentsCount: 1, key: 1 },
          { name: 'getStatusAsync', argumentsCount: 0, key: 2 },
          { name: 'registerTaskAsync', argumentsCount: 2, key: 3 },
        ],
        ExpoBackgroundNotificationTasksModule: [
          { name: 'unregisterTaskAsync', argumentsCount: 1, key: 0 },
          { name: 'registerTaskAsync', argumentsCount: 1, key: 1 },
        ],
        ExpoBadgeModule: [
          { name: 'setBadgeCountAsync', argumentsCount: 1, key: 0 },
          { name: 'getBadgeCountAsync', argumentsCount: 0, key: 1 },
        ],
        ExpoBarCodeScannerModule: [
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 0 },
          { name: 'scanFromURLAsync', argumentsCount: 2, key: 1 },
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 2 },
        ],
        ExpoBarCodeScannerView: [],
        ExpoBarometer: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'setUpdateInterval', argumentsCount: 1, key: 1 },
        ],
        ExpoBattery: [
          { key: 'getBatteryLevelAsync', argumentsCount: 0, name: 'getBatteryLevelAsync' },
          {
            argumentsCount: 0,
            name: 'isLowPowerModeEnabledAsync',
            key: 'isLowPowerModeEnabledAsync',
          },
          { key: 'startObserving', name: 'startObserving', argumentsCount: 0 },
          { argumentsCount: 0, key: 'stopObserving', name: 'stopObserving' },
          { name: 'getBatteryStateAsync', key: 'getBatteryStateAsync', argumentsCount: 0 },
        ],
        ExpoBlurViewManager: [{ name: 'setNativeProps', argumentsCount: 2, key: 0 }],
        ExpoBrightness: [
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 0 },
          { name: 'getSystemBrightnessAsync', argumentsCount: 0, key: 1 },
          { name: 'setSystemBrightnessAsync', argumentsCount: 0, key: 2 },
          { name: 'useSystemBrightnessAsync', argumentsCount: 0, key: 3 },
          { name: 'isUsingSystemBrightnessAsync', argumentsCount: 0, key: 4 },
          { name: 'getSystemBrightnessModeAsync', argumentsCount: 0, key: 5 },
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 6 },
          { name: 'setBrightnessAsync', argumentsCount: 1, key: 7 },
          { name: 'getBrightnessAsync', argumentsCount: 0, key: 8 },
          { name: 'setSystemBrightnessModeAsync', argumentsCount: 0, key: 9 },
        ],
        ExpoCalendar: [
          { name: 'deleteCalendarAsync', argumentsCount: 1, key: 0 },
          { name: 'deleteReminderAsync', argumentsCount: 1, key: 1 },
          { name: 'getCalendarPermissionsAsync', argumentsCount: 0, key: 2 },
          { name: 'deleteEventAsync', argumentsCount: 2, key: 3 },
          { name: 'requestRemindersPermissionsAsync', argumentsCount: 0, key: 4 },
          { name: 'getEventsAsync', argumentsCount: 3, key: 5 },
          { name: 'getSourcesAsync', argumentsCount: 0, key: 6 },
          { name: 'getReminderByIdAsync', argumentsCount: 1, key: 7 },
          { name: 'requestCalendarPermissionsAsync', argumentsCount: 0, key: 8 },
          { name: 'getAttendeesForEventAsync', argumentsCount: 1, key: 9 },
          { name: 'getRemindersAsync', argumentsCount: 4, key: 10 },
          { name: 'getRemindersPermissionsAsync', argumentsCount: 0, key: 11 },
          { name: 'saveEventAsync', argumentsCount: 2, key: 12 },
          { name: 'getCalendarsAsync', argumentsCount: 1, key: 13 },
          { name: 'getEventByIdAsync', argumentsCount: 2, key: 14 },
          { name: 'getDefaultCalendarAsync', argumentsCount: 0, key: 15 },
          { name: 'saveCalendarAsync', argumentsCount: 1, key: 16 },
          { name: 'saveReminderAsync', argumentsCount: 1, key: 17 },
          { name: 'getSourceByIdAsync', argumentsCount: 1, key: 18 },
        ],
        ExpoCellular: [
          {
            name: 'getCellularGenerationAsync',
            argumentsCount: 0,
            key: 'getCellularGenerationAsync',
          },
          { key: 'getIsoCountryCodeAsync', name: 'getIsoCountryCodeAsync', argumentsCount: 0 },
          {
            name: 'getMobileCountryCodeAsync',
            argumentsCount: 0,
            key: 'getMobileCountryCodeAsync',
          },
          {
            key: 'getMobileNetworkCodeAsync',
            name: 'getMobileNetworkCodeAsync',
            argumentsCount: 0,
          },
          { name: 'allowsVoipAsync', argumentsCount: 0, key: 'allowsVoipAsync' },
          { name: 'getCarrierNameAsync', key: 'getCarrierNameAsync', argumentsCount: 0 },
        ],
        ExpoClipboard: [
          { argumentsCount: 0, key: 'hasImageAsync', name: 'hasImageAsync' },
          { name: 'hasUrlAsync', argumentsCount: 0, key: 'hasUrlAsync' },
          { name: 'startObserving', key: 'startObserving', argumentsCount: 0 },
          { name: 'setStringAsync', argumentsCount: 2, key: 'setStringAsync' },
          { name: 'stopObserving', argumentsCount: 0, key: 'stopObserving' },
          { key: 'getUrlAsync', name: 'getUrlAsync', argumentsCount: 0 },
          { argumentsCount: 1, name: 'getStringAsync', key: 'getStringAsync' },
          { argumentsCount: 1, key: 'setImageAsync', name: 'setImageAsync' },
          { name: 'getImageAsync', key: 'getImageAsync', argumentsCount: 1 },
          { argumentsCount: 0, name: 'hasStringAsync', key: 'hasStringAsync' },
          { argumentsCount: 1, key: 'setUrlAsync', name: 'setUrlAsync' },
        ],
        ExpoContacts: [
          { name: 'getDefaultContainerIdentifierAsync', argumentsCount: 0, key: 0 },
          { name: 'addExistingGroupToContainerAsync', argumentsCount: 2, key: 1 },
          { name: 'createGroupAsync', argumentsCount: 2, key: 2 },
          { name: 'addContactAsync', argumentsCount: 2, key: 3 },
          { name: 'removeGroupAsync', argumentsCount: 1, key: 4 },
          { name: 'removeContactFromGroupAsync', argumentsCount: 2, key: 5 },
          { name: 'removeContactAsync', argumentsCount: 1, key: 6 },
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 7 },
          { name: 'updateContactAsync', argumentsCount: 1, key: 8 },
          { name: 'getGroupsAsync', argumentsCount: 1, key: 9 },
          { name: 'addExistingContactToGroupAsync', argumentsCount: 2, key: 10 },
          { name: 'getContainersAsync', argumentsCount: 1, key: 11 },
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 12 },
          { name: 'updateGroupNameAsync', argumentsCount: 2, key: 13 },
          { name: 'getContactsAsync', argumentsCount: 1, key: 14 },
          { name: 'presentFormAsync', argumentsCount: 3, key: 15 },
          { name: 'writeContactToFileAsync', argumentsCount: 1, key: 16 },
          { name: 'dismissFormAsync', argumentsCount: 0, key: 17 },
        ],
        ExpoCrypto: [
          { name: 'digestString', argumentsCount: 3, key: 'digestString' },
          { name: 'digestStringAsync', key: 'digestStringAsync', argumentsCount: 3 },
        ],
        ExpoDevice: [
          { name: 'getDeviceTypeAsync', argumentsCount: 0, key: 0 },
          { name: 'isRootedExperimentalAsync', argumentsCount: 0, key: 1 },
          { name: 'getUptimeAsync', argumentsCount: 0, key: 2 },
        ],
        ExpoDocumentPicker: [{ name: 'getDocumentAsync', argumentsCount: 1, key: 0 }],
        ExpoErrorRecovery: [{ name: 'saveRecoveryProps', argumentsCount: 1, key: 0 }],
        ExpoFaceDetector: [{ name: 'detectFaces', argumentsCount: 1, key: 0 }],
        ExpoFirebaseAnalytics: [
          { name: 'logEvent', argumentsCount: 2, key: 0 },
          { name: 'setUserId', argumentsCount: 1, key: 1 },
          { name: 'setUserProperties', argumentsCount: 1, key: 2 },
          { name: 'resetAnalyticsData', argumentsCount: 0, key: 3 },
          { name: 'setSessionTimeoutDuration', argumentsCount: 1, key: 4 },
          { name: 'setAnalyticsCollectionEnabled', argumentsCount: 1, key: 5 },
        ],
        ExpoFirebaseCore: [],
        ExpoFontLoader: [{ name: 'loadAsync', argumentsCount: 2, key: 0 }],
        ExpoHaptics: [
          { name: 'selectionAsync', key: 'selectionAsync', argumentsCount: 0 },
          { key: 'notificationAsync', name: 'notificationAsync', argumentsCount: 1 },
          { name: 'impactAsync', argumentsCount: 1, key: 'impactAsync' },
        ],
        ExpoImageManipulator: [
          { key: 'manipulateAsync', name: 'manipulateAsync', argumentsCount: 3 },
        ],
        ExpoKeepAwake: [
          { argumentsCount: 1, name: 'deactivate', key: 'deactivate' },
          { argumentsCount: 0, name: 'isActivated', key: 'isActivated' },
          { argumentsCount: 1, name: 'activate', key: 'activate' },
        ],
        ExpoLinearGradient: [],
        ExpoLocalAuthentication: [
          { name: 'supportedAuthenticationTypesAsync', argumentsCount: 0, key: 0 },
          { name: 'isEnrolledAsync', argumentsCount: 0, key: 1 },
          { name: 'getEnrolledLevelAsync', argumentsCount: 0, key: 2 },
          { name: 'hasHardwareAsync', argumentsCount: 0, key: 3 },
          { name: 'authenticateAsync', argumentsCount: 1, key: 4 },
        ],
        ExpoLocalization: [
          { name: 'getLocalizationAsync', argumentsCount: 0, key: 'getLocalizationAsync' },
          { name: 'getLocales', argumentsCount: 0, key: 'getLocales' },
          { key: 'getCalendars', name: 'getCalendars', argumentsCount: 0 },
        ],
        ExpoLocation: [
          { name: 'watchPositionImplAsync', argumentsCount: 2, key: 0 },
          { name: 'watchDeviceHeading', argumentsCount: 1, key: 1 },
          { name: 'requestForegroundPermissionsAsync', argumentsCount: 0, key: 2 },
          { name: 'hasServicesEnabledAsync', argumentsCount: 0, key: 3 },
          { name: 'removeWatchAsync', argumentsCount: 1, key: 4 },
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 5 },
          { name: 'reverseGeocodeAsync', argumentsCount: 1, key: 6 },
          { name: 'hasStartedGeofencingAsync', argumentsCount: 1, key: 7 },
          { name: 'startLocationUpdatesAsync', argumentsCount: 2, key: 8 },
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 9 },
          { name: 'stopGeofencingAsync', argumentsCount: 1, key: 10 },
          { name: 'hasStartedLocationUpdatesAsync', argumentsCount: 1, key: 11 },
          { name: 'getProviderStatusAsync', argumentsCount: 0, key: 12 },
          { name: 'getBackgroundPermissionsAsync', argumentsCount: 0, key: 13 },
          { name: 'geocodeAsync', argumentsCount: 1, key: 14 },
          { name: 'stopLocationUpdatesAsync', argumentsCount: 1, key: 15 },
          { name: 'getLastKnownPositionAsync', argumentsCount: 1, key: 16 },
          { name: 'getForegroundPermissionsAsync', argumentsCount: 0, key: 17 },
          { name: 'getCurrentPositionAsync', argumentsCount: 1, key: 18 },
          { name: 'startGeofencingAsync', argumentsCount: 2, key: 19 },
          { name: 'requestBackgroundPermissionsAsync', argumentsCount: 0, key: 20 },
        ],
        ExpoMailComposer: [
          { argumentsCount: 1, key: 'composeAsync', name: 'composeAsync' },
          { key: 'isAvailableAsync', argumentsCount: 0, name: 'isAvailableAsync' },
        ],
        ExpoNetwork: [
          { name: 'getIpAddressAsync', argumentsCount: 0, key: 0 },
          { name: 'getNetworkStateAsync', argumentsCount: 0, key: 1 },
        ],
        ExpoNotificationCategoriesModule: [
          { name: 'deleteNotificationCategoryAsync', argumentsCount: 1, key: 0 },
          { name: 'getNotificationCategoriesAsync', argumentsCount: 0, key: 1 },
          { name: 'setNotificationCategoryAsync', argumentsCount: 3, key: 2 },
        ],
        ExpoNotificationPermissionsModule: [
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 0 },
          { name: 'requestPermissionsAsync', argumentsCount: 1, key: 1 },
        ],
        ExpoNotificationPresenter: [
          { name: 'presentNotificationAsync', argumentsCount: 2, key: 0 },
          { name: 'dismissNotificationAsync', argumentsCount: 1, key: 1 },
          { name: 'getPresentedNotificationsAsync', argumentsCount: 0, key: 2 },
          { name: 'dismissAllNotificationsAsync', argumentsCount: 0, key: 3 },
        ],
        ExpoNotificationScheduler: [
          { name: 'cancelAllScheduledNotificationsAsync', argumentsCount: 0, key: 0 },
          { name: 'getNextTriggerDateAsync', argumentsCount: 1, key: 1 },
          { name: 'getAllScheduledNotificationsAsync', argumentsCount: 0, key: 2 },
          { name: 'scheduleNotificationAsync', argumentsCount: 3, key: 3 },
          { name: 'cancelScheduledNotificationAsync', argumentsCount: 1, key: 4 },
        ],
        ExpoNotificationsEmitter: [
          { name: 'getLastNotificationResponseAsync', argumentsCount: 0, key: 0 },
        ],
        ExpoNotificationsHandlerModule: [
          { name: 'handleNotificationAsync', argumentsCount: 2, key: 0 },
        ],
        ExpoPermissions: [
          { name: 'getAsync', argumentsCount: 1, key: 0 },
          { name: 'askAsync', argumentsCount: 1, key: 1 },
        ],
        ExpoPushTokenManager: [
          { name: 'getDevicePushTokenAsync', argumentsCount: 0, key: 0 },
          { name: 'unregisterForNotificationsAsync', argumentsCount: 0, key: 1 },
        ],
        ExpoRandom: [
          { name: 'getRandomBase64String', argumentsCount: 1, key: 'getRandomBase64String' },
          {
            name: 'getRandomBase64StringAsync',
            key: 'getRandomBase64StringAsync',
            argumentsCount: 1,
          },
        ],
        ExpoSMS: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'sendSMSAsync', argumentsCount: 3, key: 1 },
        ],
        ExpoScreenCapture: [
          { name: 'preventScreenCapture', argumentsCount: 0, key: 0 },
          { name: 'allowScreenCapture', argumentsCount: 0, key: 1 },
        ],
        ExpoScreenOrientation: [
          { name: 'lockAsync', argumentsCount: 1, key: 0 },
          { name: 'supportsOrientationLockAsync', argumentsCount: 1, key: 1 },
          { name: 'getOrientationAsync', argumentsCount: 0, key: 2 },
          { name: 'lockPlatformAsync', argumentsCount: 1, key: 3 },
          { name: 'getOrientationLockAsync', argumentsCount: 0, key: 4 },
          { name: 'getPlatformOrientationLockAsync', argumentsCount: 0, key: 5 },
        ],
        ExpoSecureStore: [
          { name: 'getValueWithKeyAsync', argumentsCount: 2, key: 0 },
          { name: 'deleteValueWithKeyAsync', argumentsCount: 2, key: 1 },
          { name: 'setValueWithKeyAsync', argumentsCount: 3, key: 2 },
        ],
        ExpoSharing: [{ name: 'shareAsync', argumentsCount: 2, key: 0 }],
        ExpoSplashScreen: [
          { name: 'hideAsync', argumentsCount: 0, key: 0 },
          { name: 'preventAutoHideAsync', argumentsCount: 0, key: 1 },
        ],
        ExpoStoreReview: [
          { name: 'requestReview', key: 'requestReview', argumentsCount: 0 },
          { name: 'isAvailableAsync', key: 'isAvailableAsync', argumentsCount: 0 },
        ],
        ExpoSystemUI: [
          { argumentsCount: 0, key: 'getBackgroundColorAsync', name: 'getBackgroundColorAsync' },
          { argumentsCount: 1, name: 'setBackgroundColorAsync', key: 'setBackgroundColorAsync' },
        ],
        ExpoTaskManager: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'notifyTaskFinishedAsync', argumentsCount: 2, key: 1 },
          { name: 'unregisterTaskAsync', argumentsCount: 1, key: 2 },
          { name: 'getTaskOptionsAsync', argumentsCount: 1, key: 3 },
          { name: 'unregisterAllTasksAsync', argumentsCount: 0, key: 4 },
          { name: 'isTaskRegisteredAsync', argumentsCount: 1, key: 5 },
          { name: 'getRegisteredTasksAsync', argumentsCount: 0, key: 6 },
        ],
        ExpoTrackingTransparency: [
          { argumentsCount: 0, key: 'getPermissionsAsync', name: 'getPermissionsAsync' },
          { argumentsCount: 0, key: 'requestPermissionsAsync', name: 'requestPermissionsAsync' },
        ],
        ExpoUpdates: [
          { name: 'readLogEntriesAsync', argumentsCount: 1, key: 0 },
          { name: 'fetchUpdateAsync', argumentsCount: 0, key: 1 },
          { name: 'checkForUpdateAsync', argumentsCount: 0, key: 2 },
          { name: 'clearLogEntriesAsync', argumentsCount: 0, key: 3 },
          { name: 'reload', argumentsCount: 0, key: 4 },
        ],
        ExpoVideoThumbnails: [{ name: 'getThumbnail', argumentsCount: 2, key: 0 }],
        ExpoVideoView: [{ name: 'setFullscreen', key: 'setFullscreen', argumentsCount: 2 }],
        ExpoWebBrowser: [
          { argumentsCount: 0, key: 'mayInitWithUrlAsync', name: 'mayInitWithUrlAsync' },
          {
            argumentsCount: 0,
            name: 'getCustomTabsSupportingBrowsers',
            key: 'getCustomTabsSupportingBrowsers',
          },
          { name: 'openBrowserAsync', argumentsCount: 2, key: 'openBrowserAsync' },
          { key: 'dismissBrowser', name: 'dismissBrowser', argumentsCount: 0 },
          { key: 'warmUpAsync', argumentsCount: 0, name: 'warmUpAsync' },
          { argumentsCount: 3, name: 'openAuthSessionAsync', key: 'openAuthSessionAsync' },
          { key: 'coolDownAsync', argumentsCount: 0, name: 'coolDownAsync' },
          { argumentsCount: 0, key: 'dismissAuthSession', name: 'dismissAuthSession' },
        ],
        ExponentAV: [
          { name: 'getStatusForVideo', argumentsCount: 1, key: 0 },
          { name: 'setAudioMode', argumentsCount: 1, key: 1 },
          { name: 'unloadAudioRecorder', argumentsCount: 0, key: 2 },
          { name: 'stopAudioRecording', argumentsCount: 0, key: 3 },
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 4 },
          { name: 'setInput', argumentsCount: 1, key: 5 },
          { name: 'loadForVideo', argumentsCount: 3, key: 6 },
          { name: 'setAudioIsEnabled', argumentsCount: 1, key: 7 },
          { name: 'prepareAudioRecorder', argumentsCount: 1, key: 8 },
          { name: 'replayVideo', argumentsCount: 2, key: 9 },
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 10 },
          { name: 'unloadForSound', argumentsCount: 1, key: 11 },
          { name: 'setStatusForSound', argumentsCount: 2, key: 12 },
          { name: 'unloadForVideo', argumentsCount: 1, key: 13 },
          { name: 'replaySound', argumentsCount: 2, key: 14 },
          { name: 'getAvailableInputs', argumentsCount: 0, key: 15 },
          { name: 'getAudioRecordingStatus', argumentsCount: 0, key: 16 },
          { name: 'setStatusForVideo', argumentsCount: 2, key: 17 },
          { name: 'loadForSound', argumentsCount: 2, key: 18 },
          { name: 'pauseAudioRecording', argumentsCount: 0, key: 19 },
          { name: 'getStatusForSound', argumentsCount: 1, key: 20 },
          { name: 'getCurrentInput', argumentsCount: 0, key: 21 },
          { name: 'startAudioRecording', argumentsCount: 0, key: 22 },
        ],
        ExponentAccelerometer: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'setUpdateInterval', argumentsCount: 1, key: 1 },
        ],
        ExponentCamera: [
          { argumentsCount: 1, name: 'stopRecording', key: 'stopRecording' },
          {
            name: 'getCameraPermissionsAsync',
            argumentsCount: 0,
            key: 'getCameraPermissionsAsync',
          },
          {
            name: 'getAvailableVideoCodecsAsync',
            argumentsCount: 0,
            key: 'getAvailableVideoCodecsAsync',
          },
          {
            name: 'getMicrophonePermissionsAsync',
            argumentsCount: 0,
            key: 'getMicrophonePermissionsAsync',
          },
          { argumentsCount: 1, key: 'pausePreview', name: 'pausePreview' },
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 'requestPermissionsAsync' },
          { key: 'resumePreview', name: 'resumePreview', argumentsCount: 1 },
          {
            key: 'requestMicrophonePermissionsAsync',
            name: 'requestMicrophonePermissionsAsync',
            argumentsCount: 0,
          },
          { key: 'getAvailablePictureSizes', name: 'getAvailablePictureSizes', argumentsCount: 2 },
          { key: 'getPermissionsAsync', name: 'getPermissionsAsync', argumentsCount: 0 },
          { name: 'takePicture', key: 'takePicture', argumentsCount: 2 },
          { name: 'record', argumentsCount: 2, key: 'record' },
          {
            name: 'requestCameraPermissionsAsync',
            argumentsCount: 0,
            key: 'requestCameraPermissionsAsync',
          },
        ],
        ExponentConstants: [{ name: 'getWebViewUserAgentAsync', argumentsCount: 0, key: 0 }],
        ExponentDeviceMotion: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'setUpdateInterval', argumentsCount: 1, key: 1 },
        ],
        ExponentFileSystem: [
          { name: 'uploadAsync', argumentsCount: 3, key: 0 },
          { name: 'readDirectoryAsync', argumentsCount: 2, key: 1 },
          { name: 'getTotalDiskCapacityAsync', argumentsCount: 0, key: 2 },
          { name: 'getInfoAsync', argumentsCount: 2, key: 3 },
          { name: 'downloadAsync', argumentsCount: 3, key: 4 },
          { name: 'writeAsStringAsync', argumentsCount: 3, key: 5 },
          { name: 'deleteAsync', argumentsCount: 2, key: 6 },
          { name: 'moveAsync', argumentsCount: 1, key: 7 },
          { name: 'getFreeDiskStorageAsync', argumentsCount: 0, key: 8 },
          { name: 'readAsStringAsync', argumentsCount: 2, key: 9 },
          { name: 'downloadResumableStartAsync', argumentsCount: 5, key: 10 },
          { name: 'makeDirectoryAsync', argumentsCount: 2, key: 11 },
          { name: 'uploadTaskStartAsync', argumentsCount: 4, key: 12 },
          { name: 'copyAsync', argumentsCount: 1, key: 13 },
          { name: 'networkTaskCancelAsync', argumentsCount: 1, key: 14 },
          { name: 'downloadResumablePauseAsync', argumentsCount: 1, key: 15 },
        ],
        ExponentGLObjectManager: [
          { name: 'createContextAsync', argumentsCount: 0, key: 0 },
          { name: 'destroyContextAsync', argumentsCount: 1, key: 1 },
          { name: 'destroyObjectAsync', argumentsCount: 1, key: 2 },
          { name: 'createCameraTextureAsync', argumentsCount: 2, key: 3 },
          { name: 'takeSnapshotAsync', argumentsCount: 2, key: 4 },
        ],
        ExponentGLViewManager: [],
        ExponentGyroscope: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'setUpdateInterval', argumentsCount: 1, key: 1 },
        ],
        ExponentImagePicker: [
          {
            key: 'getCameraPermissionsAsync',
            name: 'getCameraPermissionsAsync',
            argumentsCount: 0,
          },
          { name: 'launchImageLibraryAsync', argumentsCount: 1, key: 'launchImageLibraryAsync' },
          {
            name: 'getMediaLibraryPermissionsAsync',
            argumentsCount: 1,
            key: 'getMediaLibraryPermissionsAsync',
          },
          {
            name: 'requestCameraPermissionsAsync',
            argumentsCount: 0,
            key: 'requestCameraPermissionsAsync',
          },
          { argumentsCount: 1, name: 'launchCameraAsync', key: 'launchCameraAsync' },
          {
            name: 'requestMediaLibraryPermissionsAsync',
            key: 'requestMediaLibraryPermissionsAsync',
            argumentsCount: 1,
          },
        ],
        ExponentMagnetometer: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'setUpdateInterval', argumentsCount: 1, key: 1 },
        ],
        ExponentMagnetometerUncalibrated: [
          { name: 'isAvailableAsync', argumentsCount: 0, key: 0 },
          { name: 'setUpdateInterval', argumentsCount: 1, key: 1 },
        ],
        ExponentMediaLibrary: [
          { name: 'createAssetAsync', argumentsCount: 1, key: 0 },
          { name: 'deleteAssetsAsync', argumentsCount: 1, key: 1 },
          { name: 'getPermissionsAsync', argumentsCount: 1, key: 2 },
          { name: 'removeAssetsFromAlbumAsync', argumentsCount: 2, key: 3 },
          { name: 'saveToLibraryAsync', argumentsCount: 1, key: 4 },
          { name: 'requestPermissionsAsync', argumentsCount: 1, key: 5 },
          { name: 'getAlbumsAsync', argumentsCount: 1, key: 6 },
          { name: 'getAssetsAsync', argumentsCount: 1, key: 7 },
          { name: 'createAlbumAsync', argumentsCount: 2, key: 8 },
          { name: 'deleteAlbumsAsync', argumentsCount: 2, key: 9 },
          { name: 'getMomentsAsync', argumentsCount: 0, key: 10 },
          { name: 'presentPermissionsPickerAsync', argumentsCount: 0, key: 11 },
          { name: 'addAssetsToAlbumAsync', argumentsCount: 2, key: 12 },
          { name: 'getAssetInfoAsync', argumentsCount: 2, key: 13 },
          { name: 'getAlbumAsync', argumentsCount: 1, key: 14 },
        ],
        ExponentPedometer: [
          { name: 'requestPermissionsAsync', argumentsCount: 0, key: 0 },
          { name: 'getPermissionsAsync', argumentsCount: 0, key: 1 },
          { name: 'isAvailableAsync', argumentsCount: 0, key: 2 },
          { name: 'getStepCountAsync', argumentsCount: 2, key: 3 },
        ],
        ExponentPrint: [
          { name: 'print', argumentsCount: 1, key: 0 },
          { name: 'selectPrinter', argumentsCount: 0, key: 1 },
          { name: 'printToFileAsync', argumentsCount: 1, key: 2 },
        ],
        ExponentSQLite: [
          { name: 'close', argumentsCount: 1, key: 0 },
          { name: 'exec', argumentsCount: 3, key: 1 },
          { name: 'deleteAsync', argumentsCount: 1, key: 2 },
        ],
        ExponentSpeech: [
          { name: 'speak', argumentsCount: 3, key: 0 },
          { name: 'stop', argumentsCount: 0, key: 1 },
          { name: 'pause', argumentsCount: 0, key: 2 },
          { name: 'resume', argumentsCount: 0, key: 3 },
          { name: 'isSpeaking', argumentsCount: 0, key: 4 },
          { name: 'getVoices', argumentsCount: 0, key: 5 },
        ],
        NativeModulesProxy: [{ key: 'callMethod', name: 'callMethod', argumentsCount: 3 }],
        NotificationsServerRegistrationModule: [
          { name: 'getRegistrationInfoAsync', argumentsCount: 0, key: 0 },
          { name: 'setRegistrationInfoAsync', argumentsCount: 1, key: 1 },
          { name: 'getInstallationIdAsync', argumentsCount: 0, key: 2 },
        ],
      },
    },
    getConstants: { type: 'function' },
    modulesConstants: {
      type: 'mock',
      mockDefinition: {
        EASClient: { clientID: { type: 'string' } },
        ExpoApplication: {
          applicationId: { type: 'string' },
          applicationName: { type: 'string' },
          nativeApplicationVersion: { type: 'string' },
          nativeBuildVersion: { type: 'string' },
        },
        ExpoBarCodeScannerModule: { BarCodeType: { type: 'object' }, Type: { type: 'object' } },
        ExpoBattery: { isSupported: { type: 'boolean', mock: true } },
        ExpoCellular: {
          allowsVoip: { type: 'boolean', mock: true },
          carrier: { type: 'string' },
          generation: { type: 'number', mock: 0 },
          isoCountryCode: { type: 'object', mock: null },
          mobileCountryCode: { type: 'object', mock: null },
          mobileNetworkCode: { type: 'object', mock: null },
        },
        ExpoClipboard: {},
        ExpoCrypto: {},
        ExpoDevice: {
          brand: { type: 'string' },
          deviceName: { type: 'string' },
          deviceYearClass: { type: 'number', mock: 2021 },
          isDevice: { type: 'boolean', mock: true },
          manufacturer: { type: 'string' },
          modelId: { type: 'string' },
          modelName: { type: 'string' },
          osBuildId: { type: 'string' },
          osInternalBuildId: { type: 'string' },
          osName: { type: 'string' },
          osVersion: { type: 'string' },
          supportedCpuArchitectures: { type: 'array' },
          totalMemory: { type: 'number', mock: 3824369664 },
        },
        ExpoErrorRecovery: { recoveredProps: { type: 'object', mock: null } },
        ExpoFaceDetector: {
          Classifications: { type: 'object' },
          Landmarks: { type: 'object' },
          Mode: { type: 'object' },
        },
        ExpoFirebaseCore: { DEFAULT_APP_NAME: { type: 'string' } },
        ExpoHaptics: {},
        ExpoImageManipulator: {},
        ExpoKeepAwake: {},
        ExpoLinearGradient: {},
        ExpoLocalization: {
          currency: { type: 'string' },
          decimalSeparator: { type: 'string' },
          digitGroupingSeparator: { type: 'string' },
          isMetric: { type: 'boolean', mock: true },
          isRTL: { type: 'boolean', mock: false },
          isoCurrencyCodes: { type: 'array' },
          locale: { type: 'string' },
          locales: { type: 'array' },
          region: { type: 'string' },
          timezone: { type: 'string' },
        },
        ExpoMailComposer: {},
        ExpoRandom: {},
        ExpoSecureStore: {
          AFTER_FIRST_UNLOCK: { type: 'number', mock: 0 },
          AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: { type: 'number', mock: 1 },
          ALWAYS: { type: 'number', mock: 2 },
          ALWAYS_THIS_DEVICE_ONLY: { type: 'number', mock: 4 },
          WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: { type: 'number', mock: 3 },
          WHEN_UNLOCKED: { type: 'number', mock: 5 },
          WHEN_UNLOCKED_THIS_DEVICE_ONLY: { type: 'number', mock: 6 },
        },
        ExpoStoreReview: {},
        ExpoSystemUI: {},
        ExpoTaskManager: { EVENT_NAME: { type: 'string' } },
        ExpoTrackingTransparency: {},
        ExpoUpdates: {
          channel: { type: 'string' },
          isEnabled: { type: 'boolean', mock: false },
          isMissingRuntimeVersion: { type: 'boolean', mock: false },
          releaseChannel: { type: 'string' },
          runtimeVersion: { type: 'string' },
        },
        ExpoVideoView: {
          ScaleAspectFill: { type: 'string' },
          ScaleAspectFit: { type: 'string' },
          ScaleNone: { type: 'string' },
          ScaleToFill: { type: 'string' },
        },
        ExpoWebBrowser: {},
        ExponentAV: { Qualities: { type: 'object' } },
        ExponentCamera: {
          AutoFocus: { type: 'object' },
          FlashMode: { type: 'object' },
          Type: { type: 'object' },
          VideoCodec: { type: 'object' },
          VideoQuality: { type: 'object' },
          VideoStabilization: { type: 'object' },
          WhiteBalance: { type: 'object' },
        },
        ExponentConstants: {
          appOwnership: { type: 'string' },
          debugMode: { type: 'boolean', mock: true },
          deviceName: { type: 'string' },
          deviceYearClass: { type: 'number', mock: 2022 },
          executionEnvironment: { type: 'string' },
          experienceUrl: { type: 'string' },
          expoRuntimeVersion: { type: 'string' },
          expoVersion: { type: 'string' },
          installationId: { type: 'string' },
          isDetached: { type: 'boolean', mock: false },
          isDevice: { type: 'boolean', mock: true },
          isHeadless: { type: 'boolean', mock: false },
          linkingUri: { type: 'string' },
          manifest: { type: 'object' },
          nativeAppVersion: { type: 'string' },
          nativeBuildVersion: { type: 'string' },
          platform: { type: 'object' },
          sessionId: { type: 'string' },
          statusBarHeight: { type: 'number', mock: 20 },
          supportedExpoSdks: { type: 'array' },
          systemFonts: { type: 'array' },
        },
        ExponentDeviceMotion: { Gravity: { type: 'number', mock: 9.8100004196167 } },
        ExponentFileSystem: {
          bundleDirectory: { type: 'object', mock: null },
          bundledAssets: { type: 'object', mock: null },
          cacheDirectory: { type: 'string' },
          documentDirectory: { type: 'string' },
        },
        ExponentImagePicker: {},
        ExponentMediaLibrary: {
          CHANGE_LISTENER_NAME: { type: 'string' },
          MediaType: { type: 'object' },
          SortBy: { type: 'object' },
        },
        ExponentPrint: { Orientation: { type: 'object' } },
      },
    },
    viewManagersMetadata: {
      type: 'object',
      mock: {
        ExpoBarCodeScannerView: { propsNames: ['type', 'barCodeTypes'] },
        ExpoAppleAuthenticationButtonContinueWhite: { propsNames: ['cornerRadius'] },
        ExpoBlurView: { propsNames: ['intensity', 'tint'] },
        ExpoLinearGradient: { propsNames: ['colors', 'startPoint', 'endPoint', 'locations'] },
        ExpoAppleAuthenticationButtonContinueWhiteOutline: { propsNames: ['cornerRadius'] },
        ExpoAppleAuthenticationButtonSignInWhiteOutline: { propsNames: ['cornerRadius'] },
        ExponentGLView: { propsNames: ['msaaSamples'] },
        ExpoAppleAuthenticationButtonContinueBlack: { propsNames: ['cornerRadius'] },
        ExpoAppleAuthenticationButtonSignUpWhiteOutline: { propsNames: ['cornerRadius'] },
        ExpoAppleAuthenticationButtonSignUpBlack: { propsNames: ['cornerRadius'] },
        ExpoVideoView: { propsNames: ['status', 'useNativeControls', 'source', 'resizeMode'] },
        ExpoAppleAuthenticationButtonSignInWhite: { propsNames: ['cornerRadius'] },
        ExpoAppleAuthenticationButtonSignUpWhite: { propsNames: ['cornerRadius'] },
        ExpoAppleAuthenticationButtonSignInBlack: { propsNames: ['cornerRadius'] },
        ExponentCamera: {
          propsNames: [
            'type',
            'flashMode',
            'faceDetectorSettings',
            'barCodeScannerSettings',
            'autoFocus',
            'focusDepth',
            'zoom',
            'whiteBalance',
            'pictureSize',
            'faceDetectorEnabled',
            'barCodeScannerEnabled',
          ],
        },
      },
    },
  },
  RNAWSCognito: {
    computeModPow: { type: 'function', functionType: 'async' },
    computeS: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    getRandomBase64: { type: 'function', functionType: 'sync' },
  },
  RNBranch: {
    INIT_SESSION_ERROR: { type: 'string' },
    INIT_SESSION_START: { type: 'string' },
    INIT_SESSION_SUCCESS: { type: 'string' },
    STANDARD_EVENT_ACHIEVE_LEVEL: { type: 'string' },
    STANDARD_EVENT_ADD_PAYMENT_INFO: { type: 'string' },
    STANDARD_EVENT_ADD_TO_CART: { type: 'string' },
    STANDARD_EVENT_ADD_TO_WISHLIST: { type: 'string' },
    STANDARD_EVENT_CLICK_AD: { type: 'string' },
    STANDARD_EVENT_COMPLETE_REGISTRATION: { type: 'string' },
    STANDARD_EVENT_COMPLETE_TUTORIAL: { type: 'string' },
    STANDARD_EVENT_INITIATE_PURCHASE: { type: 'string' },
    STANDARD_EVENT_INVITE: { type: 'string' },
    STANDARD_EVENT_LOGIN: { type: 'string' },
    STANDARD_EVENT_PURCHASE: { type: 'string' },
    STANDARD_EVENT_RATE: { type: 'string' },
    STANDARD_EVENT_RESERVE: { type: 'string' },
    STANDARD_EVENT_SEARCH: { type: 'string' },
    STANDARD_EVENT_SHARE: { type: 'string' },
    STANDARD_EVENT_SPEND_CREDITS: { type: 'string' },
    STANDARD_EVENT_START_TRIAL: { type: 'string' },
    STANDARD_EVENT_SUBSCRIBE: { type: 'string' },
    STANDARD_EVENT_UNLOCK_ACHIEVEMENT: { type: 'string' },
    STANDARD_EVENT_VIEW_AD: { type: 'string' },
    STANDARD_EVENT_VIEW_CART: { type: 'string' },
    STANDARD_EVENT_VIEW_ITEM: { type: 'string' },
    STANDARD_EVENT_VIEW_ITEMS: { type: 'string' },
    createUniversalObject: { type: 'function', functionType: 'promise' },
    disableTracking: { type: 'function', functionType: 'async' },
    generateShortUrl: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getCreditHistory: { type: 'function', functionType: 'promise' },
    getFirstReferringParams: { type: 'function', functionType: 'promise' },
    getLatestReferringParams: { type: 'function', functionType: 'promise' },
    getShortUrl: { type: 'function', functionType: 'promise' },
    initializeBranch: { type: 'function', functionType: 'promise' },
    isTrackingDisabled: { type: 'function', functionType: 'promise' },
    listOnSpotlight: { type: 'function', functionType: 'promise' },
    loadRewards: { type: 'function', functionType: 'promise' },
    logEvent: { type: 'function', functionType: 'promise' },
    logout: { type: 'function', functionType: 'async' },
    openURL: { type: 'function', functionType: 'async' },
    redeemInitSessionResult: { type: 'function', functionType: 'promise' },
    redeemRewards: { type: 'function', functionType: 'promise' },
    registerView: { type: 'function', functionType: 'promise' },
    releaseUniversalObject: { type: 'function', functionType: 'async' },
    sendCommerceEvent: { type: 'function', functionType: 'promise' },
    setIdentity: { type: 'function', functionType: 'async' },
    setRequestMetadataKey: { type: 'function', functionType: 'async' },
    showShareSheet: { type: 'function', functionType: 'promise' },
    userCompletedAction: { type: 'function', functionType: 'async' },
    userCompletedActionOnUniversalObject: { type: 'function', functionType: 'promise' },
  },
  RNBranchEventEmitter: {
    addListener: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    removeListeners: { type: 'function', functionType: 'async' },
  },
  RNCMaskedViewManager: {},
  RNCNetInfo: {
    addListener: { type: 'function', functionType: 'async' },
    configure: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    getCurrentState: { type: 'function', functionType: 'promise' },
    removeListeners: { type: 'function', functionType: 'async' },
  },
  RNCSafeAreaContext: {
    getConstants: { type: 'function' },
    initialWindowMetrics: { type: 'object' },
  },
  RNCSafeAreaProvider: {},
  RNCSafeAreaView: {},
  RNCSegmentedControlManager: {},
  RNCSliderManager: {},
  RNCViewPager: {
    getConstants: { type: 'function' },
    setPage: { type: 'function', functionType: 'async' },
    setPageWithoutAnimation: { type: 'function', functionType: 'async' },
    setScrollEnabled: { type: 'function', functionType: 'async' },
  },
  RNCWebViewManager: {
    getConstants: { type: 'function' },
    goBack: { type: 'function', functionType: 'async' },
    goForward: { type: 'function', functionType: 'async' },
    injectJavaScript: { type: 'function', functionType: 'async' },
    postMessage: { type: 'function', functionType: 'async' },
    reload: { type: 'function', functionType: 'async' },
    requestFocus: { type: 'function', functionType: 'async' },
    startLoadWithResult: { type: 'function', functionType: 'async' },
    stopLoading: { type: 'function', functionType: 'async' },
  },
  RNDateTimePickerManager: {},
  RNGestureHandlerButton: {},
  RNGestureHandlerModule: {
    Direction: { type: 'object' },
    State: { type: 'object' },
    addListener: { type: 'function', functionType: 'async' },
    attachGestureHandler: { type: 'function', functionType: 'async' },
    createGestureHandler: { type: 'function', functionType: 'async' },
    dropGestureHandler: { type: 'function', functionType: 'async' },
    flushOperations: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    handleClearJSResponder: { type: 'function', functionType: 'async' },
    handleSetJSResponder: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    updateGestureHandler: { type: 'function', functionType: 'async' },
  },
  RNSFullWindowOverlayManager: {},
  RNSScreenContainerManager: {},
  RNSScreenManager: {},
  RNSScreenNavigationContainerManager: {},
  RNSScreenStackHeaderConfigManager: {},
  RNSScreenStackHeaderSubviewManager: {},
  RNSScreenStackManager: {},
  RNSSearchBarManager: {},
  RNSVGCircleManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGClipPathManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGDefsManager: {},
  RNSVGEllipseManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGForeignObjectManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGGroupManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGImageManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGLineManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGLinearGradientManager: {},
  RNSVGMarkerManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGMaskManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGNodeManager: {},
  RNSVGPathManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGPatternManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGRadialGradientManager: {},
  RNSVGRectManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGRenderableManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGSvgViewManager: {
    getConstants: { type: 'function' },
    toDataURL: { type: 'function', functionType: 'async' },
  },
  RNSVGSymbolManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGTSpanManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGTextManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGTextPathManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGUseManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSharedElementTransition: {
    configure: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
  },
  RNSkia: {
    getConstants: { type: 'function' },
    install: { type: 'function', functionType: 'sync' },
  },
  RNViewShot: {
    captureRef: { type: 'function', functionType: 'promise' },
    captureScreen: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    releaseCapture: { type: 'function', functionType: 'async' },
  },
  ReanimatedModule: {
    addListener: { type: 'function', functionType: 'async' },
    animateNextTransition: { type: 'function', functionType: 'async' },
    attachEvent: { type: 'function', functionType: 'async' },
    connectNodeToView: { type: 'function', functionType: 'async' },
    connectNodes: { type: 'function', functionType: 'async' },
    createNode: { type: 'function', functionType: 'async' },
    detachEvent: { type: 'function', functionType: 'async' },
    disconnectNodeFromView: { type: 'function', functionType: 'async' },
    disconnectNodes: { type: 'function', functionType: 'async' },
    dropNode: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    getValue: { type: 'function', functionType: 'async' },
    installTurboModule: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setValue: { type: 'function', functionType: 'async' },
    triggerRender: { type: 'function', functionType: 'async' },
  },
};
