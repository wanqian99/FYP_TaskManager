{"version":3,"sources":["BrushProperties.tsx"],"names":["BrushProperties","thickness","DEFAULT_THICKNESS","opacity","DEFAULT_OPACITY","onThicknessChange","onOpacityChange","opacityStep","DEFAULT_OPACITY_STEP","thicknessMin","DEFAULT_THICKNESS_MIN","thicknessMax","DEFAULT_THICKNESS_MAX","thicknessStep","DEFAULT_THICKNESS_STEP","sliderColor","DEFAULT_SLIDER_COLOR","color","onColorChange","colors","DEFAULT_COLORS","style","ref","height","length","colorButtonSize","SLIDERS_HEIGHT","styles","sliderContainer","StyleSheet","create","marginVertical"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAWA;;AACA;;;;;;;;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAe,gBAAG,uBACtB,CACE;AACEC,EAAAA,SAAS,GAAGC,4BADd;AAEEC,EAAAA,OAAO,GAAGC,0BAFZ;AAGEC,EAAAA,iBAHF;AAIEC,EAAAA,eAJF;AAKEC,EAAAA,WAAW,GAAGC,+BALhB;AAMEC,EAAAA,YAAY,GAAGC,gCANjB;AAOEC,EAAAA,YAAY,GAAGC,gCAPjB;AAQEC,EAAAA,aAAa,GAAGC,iCARlB;AASEC,EAAAA,WAAW,GAAGC,+BAThB;AAUEC,EAAAA,KAVF;AAWEC,EAAAA,aAXF;AAYEC,EAAAA,MAAM,GAAGC,yBAZX;AAaEC,EAAAA;AAbF,CADF,EAgBEC,GAhBF,KAiBK;AACH,QAAMC,MAAM,GAAG,oBACb,MACE,CAACJ,MAAM,CAACK,MAAP,GAAgB,CAAjB,IAAsB,CAAtB,GACA,CAACL,MAAM,CAAC,CAAD,CAAN,CAAUK,MAAV,GAAmBL,MAAM,CAAC,CAAD,CAAN,CAAUK,MAA9B,IAAwCC,4BADxC,GAEAC,yBAJW,EAKb,CAACP,MAAD,CALa,CAAf;AAQA,kCAAoBG,GAApB,EAAyB,OAAO;AAC9BC,IAAAA;AAD8B,GAAP,CAAzB;AAIA,sBACE,6BAAC,qBAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEF;AAAtB,kBACE,6BAAC,oBAAD;AACE,IAAA,KAAK,EAAEJ,KADT;AAEE,IAAA,MAAM,EAAEE,MAFV;AAGE,IAAA,aAAa,EAAED;AAHjB,IADF,EAMGjB,SAAS,IAAII,iBAAb,IAAkCF,OAAlC,IAA6CG,eAA7C,iBACC,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEqB,MAAM,CAACC;AAApB,KACG3B,SAAS,IAAII,iBAAb,iBACC,6BAAC,eAAD;AACE,IAAA,YAAY,EAAEI,YADhB;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,IAAI,EAAEE,aAHR;AAIE,IAAA,KAAK,EAAEZ,SAJT;AAKE,IAAA,aAAa,EAAEI,iBALjB;AAME,IAAA,cAAc,EAAEU,WANlB;AAOE,IAAA,qBAAqB,EAAEA;AAPzB,IAFJ,EAYGZ,OAAO,IAAIG,eAAX,iBACC,6BAAC,eAAD;AACE,IAAA,YAAY,EAAE,CADhB;AAEE,IAAA,YAAY,EAAE,CAFhB;AAGE,IAAA,IAAI,EAAEC,WAHR;AAIE,IAAA,KAAK,EAAEJ,OAJT;AAKE,IAAA,aAAa,EAAEG,eALjB;AAME,IAAA,cAAc,EAAES,WANlB;AAOE,IAAA,qBAAqB,EAAEA;AAPzB,IAbJ,CAPJ,CADF;AAmCD,CAlEqB,CAAxB;;AAqEA,MAAMY,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BF,EAAAA,eAAe,EAAE;AACfG,IAAAA,cAAc,EAAE;AADD;AADc,CAAlB,CAAf;;eAMe/B,e","sourcesContent":["import React, { forwardRef, useImperativeHandle, useMemo } from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport {\n  DEFAULT_COLORS,\n  DEFAULT_OPACITY,\n  DEFAULT_OPACITY_STEP,\n  DEFAULT_SLIDER_COLOR,\n  DEFAULT_THICKNESS,\n  DEFAULT_THICKNESS_MAX,\n  DEFAULT_THICKNESS_MIN,\n  DEFAULT_THICKNESS_STEP,\n  SLIDERS_HEIGHT,\n} from '../constants';\nimport ColorPicker, { ColorPickerProps } from './colorPicker/ColorPicker';\nimport { colorButtonSize } from './colorPicker/ColorButton';\n\nexport interface BrushPropertiesProps extends ColorPickerProps {\n  /**\n   * Thickness of the brush strokes\n   * @default DEFAULT_THICKNESS\n   */\n  thickness?: number;\n\n  /**\n   * Opacity of the brush strokes\n   * @default DEFAULT_OPACITY\n   */\n  opacity?: number;\n\n  /**\n   * Callback when brush size is changed via the slider\n   * @param newThickness - New brush size\n   */\n  onThicknessChange?: (newThickness: number) => void;\n\n  /**\n   * Callback when brush opacity is changed via the slider\n   * @param newOpacity - New brush opacity\n   */\n  onOpacityChange?: (newOpacity: number) => void;\n\n  /**\n   * Step value of the opacity slider, should be between 0 and 1\n   * @default DEFAULT_OPACITY_STEP\n   */\n  opacityStep?: number;\n\n  /**\n   * Minimum value of the thickness slider\n   * @default DEFAULT_THICKNESS_MIN\n   */\n  thicknessMin?: number;\n\n  /**\n   * Maximum value of the thickness slider\n   * @default DEFAULT_THICKNESS_MAX\n   */\n  thicknessMax?: number;\n\n  /**\n   * Step value of the thickness slider, should be between `props.thicknessMin` and `props.thicknessMax`\n   * @default DEFAULT_THICKNESS_STEP\n   */\n  thicknessStep?: number;\n\n  /**\n   * Slider color\n   * @default DEFAULT_SLIDER_COLOR\n   */\n  sliderColor?: string;\n\n  /**\n   * Style of the container\n   */\n  style?: StyleProp<ViewStyle>;\n}\n\nexport interface BrushPropertiesRef {\n  height: number;\n}\n\n/**\n * Component allowing user to change brush properties, such as the color,\n * thickness, and opacity.\n *\n * If no thickness or opacity is provided, the component will behave like the\n * `ColorPicker` component.\n */\nconst BrushProperties = forwardRef<BrushPropertiesRef, BrushPropertiesProps>(\n  (\n    {\n      thickness = DEFAULT_THICKNESS,\n      opacity = DEFAULT_OPACITY,\n      onThicknessChange,\n      onOpacityChange,\n      opacityStep = DEFAULT_OPACITY_STEP,\n      thicknessMin = DEFAULT_THICKNESS_MIN,\n      thicknessMax = DEFAULT_THICKNESS_MAX,\n      thicknessStep = DEFAULT_THICKNESS_STEP,\n      sliderColor = DEFAULT_SLIDER_COLOR,\n      color,\n      onColorChange,\n      colors = DEFAULT_COLORS,\n      style,\n    },\n    ref\n  ) => {\n    const height = useMemo(\n      () =>\n        (colors.length - 1) * 3 +\n        (colors[0].length + colors[1].length) * colorButtonSize +\n        SLIDERS_HEIGHT,\n      [colors]\n    );\n\n    useImperativeHandle(ref, () => ({\n      height,\n    }));\n\n    return (\n      <Animated.View style={style}>\n        <ColorPicker\n          color={color}\n          colors={colors}\n          onColorChange={onColorChange}\n        />\n        {thickness && onThicknessChange && opacity && onOpacityChange && (\n          <View style={styles.sliderContainer}>\n            {thickness && onThicknessChange && (\n              <Slider\n                minimumValue={thicknessMin}\n                maximumValue={thicknessMax}\n                step={thicknessStep}\n                value={thickness}\n                onValueChange={onThicknessChange}\n                thumbTintColor={sliderColor}\n                minimumTrackTintColor={sliderColor}\n              />\n            )}\n            {opacity && onOpacityChange && (\n              <Slider\n                minimumValue={0}\n                maximumValue={1}\n                step={opacityStep}\n                value={opacity}\n                onValueChange={onOpacityChange}\n                thumbTintColor={sliderColor}\n                minimumTrackTintColor={sliderColor}\n              />\n            )}\n          </View>\n        )}\n      </Animated.View>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  sliderContainer: {\n    marginVertical: 10,\n  },\n});\n\nexport default BrushProperties;\n"]}