{"version":3,"sources":["ColorPicker.tsx"],"names":["ColorPicker","color","onColorChange","colors","DEFAULT_COLORS","style","styles","container","content","map","section","gKey","length","divider","row","rKey","buttonColor","colorKey","StyleSheet","create","flexDirection","borderRadius","flex","left","right","alignItems","justifyContent","marginBottom"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;AA4BA;AACA;AACA;AACA;AACA,MAAMA,WAAuC,GAAG,CAAC;AAC/CC,EAAAA,KAD+C;AAE/CC,EAAAA,aAF+C;AAG/CC,EAAAA,MAAM,GAAGC,yBAHsC;AAI/CC,EAAAA;AAJ+C,CAAD,kBAM9C,6BAAC,iBAAD;AAAM,EAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBF,KAAnB;AAAb,gBACE,6BAAC,iBAAD;AAAM,EAAA,KAAK,EAAEC,MAAM,CAACE;AAApB,GACGL,MAAM,CAACM,GAAP,CAAW,CAACC,OAAD,EAAUC,IAAV,kBACV,6BAAC,iBAAD;AACE,EAAA,GAAG,EAAEA,IADP;AAEE,EAAA,KAAK,EAAER,MAAM,CAACS,MAAP,GAAgB,CAAhB,KAAsBD,IAAtB,GAA6BL,MAAM,CAACO,OAApC,GAA8C;AAFvD,GAIGH,OAAO,CAACD,GAAR,CAAY,CAACK,GAAD,EAAMC,IAAN,kBACX,6BAAC,iBAAD;AAAM,EAAA,KAAK,EAAET,MAAM,CAACQ,GAApB;AAAyB,EAAA,GAAG,EAAEC;AAA9B,GACGD,GAAG,CAACL,GAAJ,CAAQ,CAACO,WAAD,EAAcC,QAAd,kBACP,6BAAC,oBAAD;AACE,EAAA,GAAG,EAAEA,QADP;AAEE,EAAA,KAAK,EAAED,WAFT;AAGE,EAAA,QAAQ,EAAEf,KAAK,KAAKe,WAHtB;AAIE,EAAA,OAAO,EAAEd,aAJX;AAKE,EAAA,UAAU,EAAEa,IAAI,KAAK,CAAT,IAAcE,QAAQ,KAAK,CALzC;AAME,EAAA,QAAQ,EAAEF,IAAI,KAAK,CAAT,IAAcE,QAAQ,KAAKP,OAAO,CAAC,CAAD,CAAP,CAAWE,MAAX,GAAoB,CAN3D;AAOE,EAAA,aAAa,EAAEG,IAAI,KAAKL,OAAO,CAACE,MAAR,GAAiB,CAA1B,IAA+BK,QAAQ,KAAK,CAP7D;AAQE,EAAA,WAAW,EACTF,IAAI,KAAKL,OAAO,CAACE,MAAR,GAAiB,CAA1B,IACAK,QAAQ,KAAKP,OAAO,CAAC,CAAD,CAAP,CAAWE,MAAX,GAAoB;AAVrC,EADD,CADH,CADD,CAJH,CADD,CADH,CADF,CANF;;AAsCA,MAAMN,MAAM,GAAGY,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,GAAG,EAAE;AACHM,IAAAA,aAAa,EAAE;AADZ,GAD0B;AAI/BZ,EAAAA,OAAO,EAAE;AACPa,IAAAA,YAAY,EAAE,EADP;AAEPC,IAAAA,IAAI,EAAE;AAFC,GAJsB;AAQ/Bf,EAAAA,SAAS,EAAE;AACTc,IAAAA,YAAY,EAAE,EADL;AAETE,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,KAAK,EAAE,CAHE;AAITC,IAAAA,UAAU,EAAE,QAJH;AAKTC,IAAAA,cAAc,EAAE;AALP,GARoB;AAe/Bb,EAAAA,OAAO,EAAE;AACPc,IAAAA,YAAY,EAAE;AADP;AAfsB,CAAlB,CAAf;;4BAoBe,iBAAK3B,WAAL,C","sourcesContent":["import React, { memo } from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { DEFAULT_COLORS } from '../../constants';\nimport ColorButton from './ColorButton';\n\nexport interface ColorPickerProps {\n  /**\n   * Brush color, one from the colors provided\n   */\n  color: string;\n\n  /**\n   * Callback when a color is selected\n   * @param newColor - New selected color\n   */\n  onColorChange: (newColor: string) => void;\n\n  /**\n   * Color picker colors, specifying the color picker sections each\n   * containing rows of colors. First array defines the sections, second\n   * one defines the rows, and the last one defines the columns.\n   * @default DEFAULT_COLORS\n   */\n  colors?: string[][][];\n\n  /**\n   * Style of the container\n   */\n  style?: StyleProp<ViewStyle>;\n}\n\n/**\n * Color picker component displaying a grid of colors triggering a\n * callback when a color is selected and being able to select a color\n */\nconst ColorPicker: React.FC<ColorPickerProps> = ({\n  color,\n  onColorChange,\n  colors = DEFAULT_COLORS,\n  style,\n}) => (\n  <View style={[styles.container, style]}>\n    <View style={styles.content}>\n      {colors.map((section, gKey) => (\n        <View\n          key={gKey}\n          style={colors.length - 1 !== gKey ? styles.divider : {}}\n        >\n          {section.map((row, rKey) => (\n            <View style={styles.row} key={rKey}>\n              {row.map((buttonColor, colorKey) => (\n                <ColorButton\n                  key={colorKey}\n                  color={buttonColor}\n                  selected={color === buttonColor}\n                  onPress={onColorChange}\n                  isTopStart={rKey === 0 && colorKey === 0}\n                  isTopEnd={rKey === 0 && colorKey === section[0].length - 1}\n                  isBottomStart={rKey === section.length - 1 && colorKey === 0}\n                  isBottomEnd={\n                    rKey === section.length - 1 &&\n                    colorKey === section[0].length - 1\n                  }\n                />\n              ))}\n            </View>\n          ))}\n        </View>\n      ))}\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  content: {\n    borderRadius: 10,\n    flex: 1,\n  },\n  container: {\n    borderRadius: 10,\n    left: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  divider: {\n    marginBottom: 3,\n  },\n});\n\nexport default memo(ColorPicker);\n"]}