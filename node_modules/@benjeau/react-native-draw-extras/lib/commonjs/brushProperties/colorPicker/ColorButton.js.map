{"version":3,"sources":["ColorButton.tsx"],"names":["width","Dimensions","get","colorButtonSize","Math","min","round","ColorButton","color","selected","onPress","isTopStart","isTopEnd","isBottomStart","isBottomEnd","handleOnPress","borderRadiusStyle","borderTopStartRadius","borderTopEndRadius","borderBottomStartRadius","borderBottomEndRadius","style","backgroundColor","borderWidth","borderColor","margin","styles","button","StyleSheet","create","height"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,wBAAWC,GAAX,CAAe,QAAf,CAAlB;;AACO,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,CAACN,KAAK,GAAG,EAAT,IAAe,EAA1B,CAAT,EAAwC,EAAxC,CAAxB;;;AA6CP;AACA;AACA;AACA,MAAMO,WAAuC,GAAG,CAAC;AAC/CC,EAAAA,KAD+C;AAE/CC,EAAAA,QAF+C;AAG/CC,EAAAA,OAH+C;AAI/CC,EAAAA,UAJ+C;AAK/CC,EAAAA,QAL+C;AAM/CC,EAAAA,aAN+C;AAO/CC,EAAAA;AAP+C,CAAD,KAQ1C;AACJ,QAAMC,aAAa,GAAG,MAAML,OAAO,CAACF,KAAD,CAAnC;;AAEA,QAAMQ,iBAAiB,GAAG;AACxBC,IAAAA,oBAAoB,EAAEN,UAAU,GAAG,CAAH,GAAO,CADf;AAExBO,IAAAA,kBAAkB,EAAEN,QAAQ,GAAG,CAAH,GAAO,CAFX;AAGxBO,IAAAA,uBAAuB,EAAEN,aAAa,GAAG,CAAH,GAAO,CAHrB;AAIxBO,IAAAA,qBAAqB,EAAEN,WAAW,GAAG,CAAH,GAAO;AAJjB,GAA1B;AAOA,QAAMO,KAAK,GAAG;AACZC,IAAAA,eAAe,EAAEd,KADL;AAEZe,IAAAA,WAAW,EAAEd,QAAQ,GAAG,CAAH,GAAO,CAFhB;AAGZe,IAAAA,WAAW,EAAE,qBAAShB,KAAT,IAAkB,WAAlB,GAAgC;AAHjC,GAAd;AAMA,sBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,EAAE,GAAGQ,iBAAL;AAAwBS,MAAAA,MAAM,EAAE;AAAhC;AAAb,kBACE,6BAAC,6BAAD;AACE,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,MAAR,EAAgBX,iBAAhB,EAAmCK,KAAnC,CADT;AAEE,IAAA,OAAO,EAAEN;AAFX,IADF,CADF;AAQD,CAhCD;;AAkCA,MAAMW,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BF,EAAAA,MAAM,EAAE;AACNG,IAAAA,MAAM,EAAE3B,eADF;AAENH,IAAAA,KAAK,EAAEG,eAFD;AAGNoB,IAAAA,WAAW,EAAE;AAHP;AADuB,CAAlB,CAAf;;4BAQe,iBAAKhB,WAAL,C","sourcesContent":["import React, { memo } from 'react';\nimport { TouchableOpacity, StyleSheet, Dimensions, View } from 'react-native';\n\nimport { isBright } from '../../utils';\n\nconst { width } = Dimensions.get('screen');\nexport const colorButtonSize = Math.min(Math.round((width - 40) / 12), 50);\n\ninterface ColorButtonProps {\n  /**\n   * Color of the button\n   */\n  color: string;\n\n  /**\n   * Wether the button is selected or not\n   * @default false\n   */\n  selected?: boolean;\n\n  /**\n   * Callback the button is pressed\n   * @param color Color of the button\n   */\n  onPress: (color: string) => void;\n\n  /**\n   * Wether the button is the top left corner\n   * @default false\n   */\n  isTopStart: boolean;\n\n  /**\n   * Wether the button is the top right corner\n   * @default false\n   */\n  isTopEnd: boolean;\n\n  /**\n   * Wether the button is the bottom left corner\n   * @default false\n   */\n  isBottomStart: boolean;\n\n  /**\n   * Wether the button is the bottom right corner\n   * @default false\n   */\n  isBottomEnd: boolean;\n}\n\n/**\n * Buttons displaying a color in the `ColorPicker` component\n */\nconst ColorButton: React.FC<ColorButtonProps> = ({\n  color,\n  selected,\n  onPress,\n  isTopStart,\n  isTopEnd,\n  isBottomStart,\n  isBottomEnd,\n}) => {\n  const handleOnPress = () => onPress(color);\n\n  const borderRadiusStyle = {\n    borderTopStartRadius: isTopStart ? 8 : 0,\n    borderTopEndRadius: isTopEnd ? 8 : 0,\n    borderBottomStartRadius: isBottomStart ? 8 : 0,\n    borderBottomEndRadius: isBottomEnd ? 8 : 0,\n  };\n\n  const style = {\n    backgroundColor: color,\n    borderWidth: selected ? 2 : 0,\n    borderColor: isBright(color) ? '#000000b0' : '#ffffffb0',\n  };\n\n  return (\n    <View style={{ ...borderRadiusStyle, margin: 1 }}>\n      <TouchableOpacity\n        style={[styles.button, borderRadiusStyle, style]}\n        onPress={handleOnPress}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    height: colorButtonSize,\n    width: colorButtonSize,\n    borderWidth: 3,\n  },\n});\n\nexport default memo(ColorButton);\n"]}