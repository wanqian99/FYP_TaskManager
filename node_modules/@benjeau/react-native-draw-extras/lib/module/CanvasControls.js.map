{"version":3,"sources":["CanvasControls.tsx"],"names":["React","StyleSheet","View","DEFAULT_BRUSH_PREVIEW","DEFAULT_DELETE_BUTTON_COLOR","DEFAULT_OTHER_BUTTONS_COLOR","DEFAULT_TOOL","DrawingTool","BrushPreview","Button","Brush","Delete","Eraser","Palette","Undo","CanvasControls","onClear","onUndo","onToggleEraser","onToggleBrushProperties","buttonStyle","tool","deleteButtonColor","otherButtonsColor","color","thickness","opacity","brushPreview","styles","container","content","buttonsContainer","endButton","create","height","width","justifyContent","flexDirection","alignItems","marginHorizontal","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  DEFAULT_BRUSH_PREVIEW,\n  DEFAULT_DELETE_BUTTON_COLOR,\n  DEFAULT_OTHER_BUTTONS_COLOR,\n  DEFAULT_TOOL,\n} from './constants';\nimport { DrawingTool } from './types';\nimport BrushPreview, { BrushPreviewProps } from './BrushPreview';\nimport Button from './Button';\nimport { Brush, Delete, Eraser, Palette, Undo } from './icons';\n\nexport interface CanvasControlsProps extends BrushPreviewProps {\n  /**\n   * Callback when the clear button is pressed\n   */\n  onClear?: () => void;\n\n  /**\n   * Callback when the undo button is pressed\n   */\n  onUndo?: () => void;\n\n  /**\n   * Callback when the eraser button is pressed\n   */\n  onToggleEraser?: () => void;\n\n  /**\n   * Callback when the brush properties button is pressed\n   */\n  onToggleBrushProperties?: () => void;\n\n  /**\n   * Override the style of the buttons\n   */\n  buttonStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Initial tool of the canvas\n   * @default DEFAULT_TOOL\n   */\n  tool?: DrawingTool;\n\n  /**\n   * Delete button color\n   * @default DEFAULT_DELETE_BUTTON_COLOR\n   */\n  deleteButtonColor?: string;\n\n  /**\n   * Other buttons color (undo and eraser mode toggle)\n   * @default DEFAULT_OTHER_BUTTONS_COLOR\n   */\n  otherButtonsColor?: string;\n}\n\n/**\n * Bottom section of the canvas, allowing the user to change the brush\n * properties, clear the canvas, undo strokes.\n *\n * The buttons will be visible if the corresponding callback is provided.\n */\nconst CanvasControls: React.FC<CanvasControlsProps> = ({\n  onClear,\n  onUndo,\n  onToggleEraser,\n  onToggleBrushProperties,\n  buttonStyle,\n  tool = DEFAULT_TOOL,\n  deleteButtonColor = DEFAULT_DELETE_BUTTON_COLOR,\n  otherButtonsColor = DEFAULT_OTHER_BUTTONS_COLOR,\n  color,\n  thickness,\n  opacity,\n  brushPreview = DEFAULT_BRUSH_PREVIEW,\n}) => (\n  <View style={styles.container}>\n    <View style={styles.content}>\n      <View style={styles.buttonsContainer}>\n        {onClear && (\n          <Button\n            onPress={onClear}\n            color={deleteButtonColor}\n            style={buttonStyle}\n          >\n            <Delete fill={deleteButtonColor} height={30} width={30} />\n          </Button>\n        )}\n        {onUndo && (\n          <View style={onClear && styles.endButton}>\n            <Button\n              onPress={onUndo}\n              color={otherButtonsColor}\n              style={buttonStyle}\n            >\n              <Undo fill={otherButtonsColor} height={30} width={30} />\n            </Button>\n          </View>\n        )}\n      </View>\n\n      <BrushPreview\n        color={color}\n        opacity={opacity}\n        thickness={thickness}\n        brushPreview={brushPreview}\n      />\n\n      <View style={styles.buttonsContainer}>\n        {onToggleEraser && (\n          <Button\n            onPress={onToggleEraser}\n            color={otherButtonsColor}\n            style={buttonStyle}\n          >\n            {tool === DrawingTool.Brush ? (\n              <Brush fill={otherButtonsColor} height={30} width={30} />\n            ) : (\n              <Eraser fill={otherButtonsColor} height={30} width={30} />\n            )}\n          </Button>\n        )}\n        {onToggleBrushProperties && color && (\n          <View style={onToggleEraser && styles.endButton}>\n            <Button\n              onPress={onToggleBrushProperties}\n              color={color}\n              style={buttonStyle}\n            >\n              <Palette fill={color} height={30} width={30} />\n            </Button>\n          </View>\n        )}\n      </View>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 80,\n    width: '100%',\n    justifyContent: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginHorizontal: 15,\n  },\n  buttonsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  endButton: {\n    marginLeft: 10,\n  },\n});\n\nexport default CanvasControls;\n"]}