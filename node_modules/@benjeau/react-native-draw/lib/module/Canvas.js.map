{"version":3,"sources":["Canvas.tsx"],"names":["React","forwardRef","useEffect","useImperativeHandle","useState","Animated","Dimensions","StyleSheet","View","Gesture","GestureDetector","GestureHandlerRootView","DEFAULT_BRUSH_COLOR","DEFAULT_ERASER_SIZE","DEFAULT_OPACITY","DEFAULT_THICKNESS","DEFAULT_TOOL","DrawingTool","createSVGPath","SVGRenderer","RendererHelper","width","screenWidth","height","screenHeight","get","generateSVGPath","path","simplifyOptions","simplifyPaths","amount","roundPoints","generateSVGPaths","paths","map","i","data","reduce","acc","Canvas","color","thickness","opacity","initialPaths","style","onPathsChange","eraserSize","tool","combineWithLatestPath","enabled","ref","simplifyCurrentPath","setPaths","setPath","canvasContainerStyles","styles","canvas","addPointToPath","x","y","prev","Math","floor","undo","list","p","index","length","slice","clear","getPaths","addPath","newPath","getSvg","serializePath","d","stroke","strokeWidth","strokeOpacity","separatePaths","innerPath","combinedPath","join","serializedPaths","combine","panGesture","Pan","onChange","Brush","Eraser","prevPaths","filteredDataPaths","acc2","closeToPath","some","x1","y1","abs","onBegin","onEnd","newSVGPath","lastPath","minPointers","minDistance","averageTouches","hitSlop","top","left","shouldCancelWhenOutside","create","backgroundColor","canvasOverlay","position"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport {\n  Animated,\n  Dimensions,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {\n  Gesture,\n  GestureDetector,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\n\nimport {\n  DEFAULT_BRUSH_COLOR,\n  DEFAULT_ERASER_SIZE,\n  DEFAULT_OPACITY,\n  DEFAULT_THICKNESS,\n  DEFAULT_TOOL,\n} from './constants';\nimport { DrawingTool, PathDataType, PathType } from './types';\nimport { createSVGPath } from './utils';\nimport SVGRenderer from './renderer/SVGRenderer';\nimport RendererHelper from './renderer/RendererHelper';\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\n\nexport interface CanvasProps {\n  /**\n   * Color of the brush strokes\n   * @default DEFAULT_BRUSH_COLOR\n   */\n  color?: string;\n\n  /**\n   * Thickness of the brush strokes\n   * @default DEFAULT_THICKNESS\n   */\n  thickness?: number;\n\n  /**\n   * Opacity of the brush strokes\n   * @default DEFAULT_OPACITY\n   */\n  opacity?: number;\n\n  /**\n   * Paths to be already drawn\n   * @default []\n   */\n  initialPaths?: PathType[];\n\n  /**\n   * Height of the canvas\n   */\n  height?: number;\n\n  /**\n   * Width of the canvas\n   */\n  width?: number;\n\n  /**\n   * Override the style of the container of the canvas\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Callback function when paths change\n   */\n  onPathsChange?: (paths: PathType[]) => any;\n\n  /**\n   * SVG simplification options\n   */\n  simplifyOptions?: SimplifyOptions;\n\n  /**\n   * Width of eraser (to compensate for path simplification)\n   * @default DEFAULT_ERASER_SIZE\n   */\n  eraserSize?: number;\n\n  /**\n   * Initial tool of the canvas\n   * @default DEFAULT_TOOL\n   */\n  tool?: DrawingTool;\n\n  /**\n   * Combine current path with the last path if it's the same color,\n   * thickness, and opacity.\n   *\n   * **Note**: changing this value while drawing will only be effective\n   * on the next change to opacity, thickness, or color change\n   * @default false\n   */\n  combineWithLatestPath?: boolean;\n\n  /**\n   * Allows for the canvas to be drawn on, put to false if you want to disable/lock\n   * the canvas\n   * @default true\n   */\n  enabled?: boolean;\n}\n\nexport interface SimplifyOptions {\n  /**\n   * Enable SVG path simplification on paths, except the one currently being drawn\n   */\n  simplifyPaths?: boolean;\n\n  /**\n   * Enable SVG path simplification on the stroke being drawn\n   */\n  simplifyCurrentPath?: boolean;\n\n  /**\n   * Amount of simplification to apply\n   */\n  amount?: number;\n\n  /**\n   * Ignore fractional part in the points. Improves performance\n   */\n  roundPoints?: boolean;\n}\n\nexport interface CanvasRef {\n  /**\n   * Undo last brush stroke\n   */\n  undo: () => void;\n\n  /**\n   * Removes all brush strokes\n   */\n  clear: () => void;\n\n  /**\n   * Get brush strokes data\n   */\n  getPaths: () => PathType[];\n\n  /**\n   * Append a path to the current drawing paths\n   * @param path Path to append/draw\n   */\n  addPath: (path: PathType) => void;\n\n  /**\n   * Get SVG path string of the drawing\n   */\n  getSvg: () => string;\n}\n\n/**\n * Generate SVG path string. Helper method for createSVGPath\n *\n * @param paths SVG path data\n * @param simplifyOptions Simplification options for the SVG drawing simplification\n * @returns SVG path strings\n */\nconst generateSVGPath = (\n  path: PathDataType,\n  simplifyOptions: SimplifyOptions\n) =>\n  createSVGPath(\n    path,\n    simplifyOptions.simplifyPaths ? simplifyOptions.amount! : 0,\n    simplifyOptions.roundPoints!\n  );\n\n/**\n * Generate multiple SVG path strings. If the path string is already defined, do not create a new one.\n *\n * @param paths SVG data paths\n * @param simplifyOptions Simplification options for the SVG drawing simplification\n * @returns An array of SVG path strings\n */\nconst generateSVGPaths = (\n  paths: PathType[],\n  simplifyOptions: SimplifyOptions\n) =>\n  paths.map((i) => ({\n    ...i,\n    path: i.path\n      ? i.path\n      : i.data.reduce(\n          (acc: string[], data) => [\n            ...acc,\n            generateSVGPath(data, simplifyOptions),\n          ],\n          []\n        ),\n  }));\n\nconst Canvas = forwardRef<CanvasRef, CanvasProps>(\n  (\n    {\n      color = DEFAULT_BRUSH_COLOR,\n      thickness = DEFAULT_THICKNESS,\n      opacity = DEFAULT_OPACITY,\n      initialPaths = [],\n      style,\n      height = screenHeight - 80,\n      width = screenWidth,\n      simplifyOptions = {},\n      onPathsChange,\n      eraserSize = DEFAULT_ERASER_SIZE,\n      tool = DEFAULT_TOOL,\n      combineWithLatestPath = false,\n      enabled = true,\n    },\n    ref\n  ) => {\n    simplifyOptions = {\n      simplifyPaths: true,\n      simplifyCurrentPath: false,\n      amount: 15,\n      roundPoints: true,\n      ...simplifyOptions,\n    };\n\n    const [paths, setPaths] = useState<PathType[]>(\n      generateSVGPaths(initialPaths, simplifyOptions)\n    );\n    const [path, setPath] = useState<PathDataType>([]);\n\n    const canvasContainerStyles = [\n      styles.canvas,\n      {\n        height,\n        width,\n      },\n      style,\n    ];\n\n    const addPointToPath = (x: number, y: number) => {\n      setPath((prev) => [\n        ...prev,\n        [\n          simplifyOptions.roundPoints ? Math.floor(x) : x,\n          simplifyOptions.roundPoints ? Math.floor(y) : y,\n        ],\n      ]);\n    };\n\n    const undo = () => {\n      setPaths((list) =>\n        list.reduce((acc: PathType[], p, index) => {\n          if (index === list.length - 1) {\n            if (p.data.length > 1) {\n              return [\n                ...acc,\n                {\n                  ...p,\n                  data: p.data.slice(0, -1),\n                  path: p.path!.slice(0, -1),\n                },\n              ];\n            }\n            return acc;\n          }\n          return [...acc, p];\n        }, [])\n      );\n    };\n\n    const clear = () => {\n      setPaths([]);\n      setPath([]);\n    };\n\n    const getPaths = () => paths;\n\n    const addPath = (newPath: PathType) =>\n      setPaths((prev) => [...prev, newPath]);\n\n    const getSvg = () => {\n      const serializePath = (\n        d: string,\n        stroke: string,\n        strokeWidth: number,\n        strokeOpacity: number\n      ) =>\n        `<path d=\"${d}\" stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" opacity=\"${strokeOpacity}\" stroke-linecap=\"round\" stroke-linejoin=\"round\" fill=\"none\"/>`;\n\n      const separatePaths = (p: PathType) =>\n        p.path!.reduce(\n          (acc, innerPath) =>\n            `${acc}${serializePath(\n              innerPath,\n              p.color,\n              p.thickness,\n              p.opacity\n            )}`,\n          ''\n        );\n\n      const combinedPath = (p: PathType) =>\n        `${serializePath(p.path!.join(' '), p.color, p.thickness, p.opacity)}`;\n\n      const serializedPaths = paths.reduce(\n        (acc, p) => `${acc}${p.combine ? combinedPath(p) : separatePaths(p)}`,\n        ''\n      );\n\n      return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">${serializedPaths}</svg>`;\n    };\n\n    useImperativeHandle(ref, () => ({\n      undo,\n      clear,\n      getPaths,\n      addPath,\n      getSvg,\n    }));\n\n    useEffect(\n      () => onPathsChange && onPathsChange(paths),\n      [paths, onPathsChange]\n    );\n\n    const panGesture = Gesture.Pan()\n      .onChange(({ x, y }) => {\n        switch (tool) {\n          case DrawingTool.Brush:\n            addPointToPath(x, y);\n            break;\n          case DrawingTool.Eraser:\n            setPaths((prevPaths) =>\n              prevPaths.reduce((acc: PathType[], p) => {\n                const filteredDataPaths = p.data.reduce(\n                  (\n                    acc2: { data: PathDataType[]; path: string[] },\n                    data,\n                    index\n                  ) => {\n                    const closeToPath = data.some(\n                      ([x1, y1]) =>\n                        Math.abs(x1 - x) < p.thickness + eraserSize &&\n                        Math.abs(y1 - y) < p.thickness + eraserSize\n                    );\n\n                    // If point close to path, don't include it\n                    if (closeToPath) {\n                      return acc2;\n                    }\n\n                    return {\n                      data: [...acc2.data, data],\n                      path: [...acc2.path, p.path![index]],\n                    };\n                  },\n                  { data: [], path: [] }\n                );\n\n                if (filteredDataPaths.data.length > 0) {\n                  return [...acc, { ...p, ...filteredDataPaths }];\n                }\n\n                return acc;\n              }, [])\n            );\n            break;\n        }\n      })\n      .onBegin(({ x, y }) => {\n        if (tool === DrawingTool.Brush) {\n          addPointToPath(x, y);\n        }\n      })\n      .onEnd(() => {\n        if (tool === DrawingTool.Brush) {\n          setPaths((prev) => {\n            const newSVGPath = generateSVGPath(path, simplifyOptions);\n\n            if (prev.length === 0) {\n              return [\n                {\n                  color,\n                  path: [newSVGPath],\n                  data: [path],\n                  thickness,\n                  opacity,\n                  combine: combineWithLatestPath,\n                },\n              ];\n            }\n\n            const lastPath = prev[prev.length - 1];\n\n            // Check if the last path has the same properties\n            if (\n              lastPath.color === color &&\n              lastPath.thickness === thickness &&\n              lastPath.opacity === opacity\n            ) {\n              lastPath.path = [...lastPath.path!, newSVGPath];\n              lastPath.data = [...lastPath.data, path];\n\n              return [...prev.slice(0, -1), lastPath];\n            }\n\n            return [\n              ...prev,\n              {\n                color,\n                path: [newSVGPath],\n                data: [path],\n                thickness,\n                opacity,\n                combine: combineWithLatestPath,\n              },\n            ];\n          });\n          setPath([]);\n        }\n      })\n      .minPointers(1)\n      .minDistance(0)\n      .averageTouches(false)\n      .hitSlop({\n        height,\n        width,\n        top: 0,\n        left: 0,\n      })\n      .shouldCancelWhenOutside(true)\n      .enabled(enabled);\n\n    return (\n      <GestureHandlerRootView style={canvasContainerStyles}>\n        <Animated.View>\n          <GestureDetector gesture={panGesture}>\n            <View>\n              <RendererHelper\n                currentColor={color}\n                currentOpacity={opacity}\n                currentPath={path}\n                currentThickness={thickness}\n                currentPathTolerance={\n                  simplifyOptions.simplifyCurrentPath\n                    ? simplifyOptions.amount!\n                    : 0\n                }\n                roundPoints={simplifyOptions.roundPoints!}\n                paths={paths}\n                height={height}\n                width={width}\n                Renderer={SVGRenderer}\n              />\n            </View>\n          </GestureDetector>\n        </Animated.View>\n      </GestureHandlerRootView>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  canvas: {\n    backgroundColor: 'white',\n  },\n  canvasOverlay: {\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    backgroundColor: '#000000',\n  },\n});\n\nexport default Canvas;\n"]}